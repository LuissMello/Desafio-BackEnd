// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Moto.Infrastructure.Context;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Moto.Infrastructure.Migrations
{
    [DbContext(typeof(MotoDbContext))]
    [Migration("20240514034208_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Moto.Domain.Entities.BikeEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("bike_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("bike_created_date");

                    b.Property<string>("Model")
                        .HasColumnType("text")
                        .HasColumnName("bike_model");

                    b.Property<string>("Plate")
                        .HasColumnType("text")
                        .HasColumnName("bike_plate");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("bike_updated_date");

                    b.Property<int>("Year")
                        .HasColumnType("integer")
                        .HasColumnName("bike_year");

                    b.HasKey("Id")
                        .HasName("PK_BIKES");

                    b.HasIndex("Plate")
                        .IsUnique();

                    b.ToTable("Bikes", (string)null);
                });

            modelBuilder.Entity("Moto.Domain.Entities.PlanEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("plan_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("plan_created_date");

                    b.Property<int>("Days")
                        .HasColumnType("integer")
                        .HasColumnName("plan_days");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(4,2)")
                        .HasColumnName("flan_fee");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("plan_price");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("plan_updated_date");

                    b.HasKey("Id")
                        .HasName("PK_PLANS");

                    b.ToTable("Plans", (string)null);
                });

            modelBuilder.Entity("Moto.Domain.Entities.RentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("rent_id");

                    b.Property<Guid>("BikeId")
                        .HasColumnType("uuid")
                        .HasColumnName("rent_bike_id");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("rent_created_date");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PlanId")
                        .HasColumnType("uuid")
                        .HasColumnName("rent_plan_id");

                    b.Property<DateTime>("PreviewEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("rent_end_date");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("rent_updated_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("rent_user_id");

                    b.HasKey("Id")
                        .HasName("PK_RENTS");

                    b.HasIndex("BikeId");

                    b.HasIndex("PlanId");

                    b.HasIndex("UserId");

                    b.ToTable("Rents", (string)null);
                });

            modelBuilder.Entity("Moto.Domain.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("user_birth_date");

                    b.Property<string>("Cnh")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_cnh");

                    b.Property<int>("CnhType")
                        .HasColumnType("integer")
                        .HasColumnName("user_cnh_type");

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_cnpj");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("user_created_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("user_updated_date");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id")
                        .HasName("PK_USERS");

                    b.HasIndex("Cnh")
                        .IsUnique();

                    b.HasIndex("Cnpj")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Moto.Domain.Entities.RentEntity", b =>
                {
                    b.HasOne("Moto.Domain.Entities.BikeEntity", "Bike")
                        .WithMany()
                        .HasForeignKey("BikeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Moto.Domain.Entities.PlanEntity", "Plan")
                        .WithMany()
                        .HasForeignKey("PlanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Moto.Domain.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bike");

                    b.Navigation("Plan");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
